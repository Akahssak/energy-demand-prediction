# 🚀 Complete Setup Guide for Energy Demand Prediction Project

Follow these steps exactly to set up and deploy your MLOps project.

## ⏰ Quick Timeline (Total: ~15-20 minutes)

1. **Setup** (5 min)
2. **Training** (2 min)
3. **Testing** (3 min)
4. **Git & Deploy** (5-10 min)

---

## 📋 Step 1: Create Project Directory (1 min)

```bash
# Create project folder
mkdir energy-demand-prediction
cd energy-demand-prediction
```

---

## 📝 Step 2: Create All Project Files (3 min)

Create these files with the exact content provided:

### File 1: `train_model.py`
Copy the complete training script I provided above.

### File 2: `app.py`
Copy the complete Streamlit dashboard I provided above.

### File 3: `requirements.txt`
```
pandas==2.0.3
numpy==1.24.3
scikit-learn==1.3.0
mlflow==2.8.1
streamlit==1.28.0
plotly==5.17.0
```

### File 4: `.gitignore`
Copy the .gitignore file I provided above.

### File 5: `README.md`
Copy the README I provided above.

---

## 🔧 Step 3: Install Dependencies (1 min)

```bash
# Create virtual environment (recommended)
python -m venv venv

# Activate virtual environment
# On Windows:
venv\Scripts\activate
# On Mac/Linux:
source venv/bin/activate

# Install packages
pip install -r requirements.txt
```

---

## 🏃 Step 4: Run Training Pipeline (2 min)

```bash
python train_model.py
```

**Expected Output:**
```
============================================================
Energy Demand Prediction - MLflow Training Pipeline
============================================================
Loading and preprocessing data...
Dataset shape: (17544, 2)
Date range: 2022-01-01 00:00:00 to 2023-12-31 23:00:00
Features created. New shape: (17375, 12)

Training set size: 13900
Test set size: 3475

Training Random Forest Model...
Random Forest - MAE: 456.23, RMSE: 589.45, R2: 0.8756

Training Gradient Boosting Model...
Gradient Boosting - MAE: 478.91, RMSE: 612.34, R2: 0.8654

============================================================
Best Model: RandomForest with RMSE: 589.45
============================================================

Training completed! Files saved:
- test_predictions.csv
- energy_data.csv
- MLflow runs logged in ./mlruns
```

**Files Created:**
- ✅ `energy_data.csv` (full dataset)
- ✅ `test_predictions.csv` (predictions)
- ✅ `mlruns/` folder (MLflow logs)

---

## 🖥️ Step 5: Test Streamlit App Locally (3 min)

```bash
streamlit run app.py
```

**What to Check:**
1. ✅ App opens at `http://localhost:8501`
2. ✅ "Overview" page shows charts
3. ✅ "Predictions" page displays model results
4. ✅ "Model Performance" shows MLflow metrics
5. ✅ No errors in terminal

**If it works, press `Ctrl+C` to stop the server.**

---

## 🌐 Step 6: Initialize Git Repository (2 min)

```bash
# Initialize git
git init

# Add all files
git add .

# Commit
git commit -m "Initial commit: Energy Demand Prediction MLOps project"
```

---

## 📤 Step 7: Push to GitHub (3 min)

### Option A: Create New Repository on GitHub

1. Go to [github.com](https://github.com)
2. Click "New repository" (green button)
3. Name it: `energy-demand-prediction`
4. Keep it PUBLIC
5. DON'T initialize with README (you already have one)
6. Click "Create repository"

### Copy the commands GitHub shows you:

```bash
git remote add origin https://github.com/YOUR-USERNAME/energy-demand-prediction.git
git branch -M main
git push -u origin main
```

**Replace `YOUR-USERNAME` with your actual GitHub username!**

---

## ☁️ Step 8: Deploy on Streamlit Cloud (5 min)

### Step 8.1: Go to Streamlit Cloud
1. Visit: [share.streamlit.io](https://share.streamlit.io)
2. Click "Sign in with GitHub"
3. Authorize Streamlit

### Step 8.2: Deploy App
1. Click "New app" button
2. Fill in:
   - **Repository**: `YOUR-USERNAME/energy-demand-prediction`
   - **Branch**: `main`
   - **Main file path**: `app.py`
3. Click "Deploy!"

### Step 8.3: Wait for Deployment
- Takes 2-5 minutes
- You'll see logs in the bottom
- App URL will be: `https://YOUR-APP-NAME.streamlit.app`

---

## ✅ Step 9: Verify Deployment

Once deployed, check:
1. ✅ App loads without errors
2. ✅ All 4 pages work (Overview, Predictions, Model Performance, About)
3. ✅ Charts display correctly
4. ✅ Data tables show values

---

## 🎯 Step 10: Submit Your Project

Provide these links to your instructor:

1. **GitHub Repository**: `https://github.com/YOUR-USERNAME/energy-demand-prediction`
2. **Live App**: `https://YOUR-APP-NAME.streamlit.app`

---

## 🐛 Common Issues & Solutions

### Issue 1: "ModuleNotFoundError"
```bash
# Solution: Reinstall dependencies
pip install -r requirements.txt
```

### Issue 2: "No such file: energy_data.csv"
```bash
# Solution: Run training script
python train_model.py
```

### Issue 3: Streamlit deployment fails
**Solution**: Make sure these files are committed:
```bash
# Check files
git status

# If files are missing, add them
git add energy_data.csv test_predictions.csv mlruns/
git commit -m "Add training outputs"
git push
```

### Issue 4: App shows but no data
**Solution**: The CSV files weren't committed. Run:
```bash
python train_model.py
git add *.csv mlruns/
git commit -m "Add generated data"
git push
```

Then redeploy on Streamlit Cloud (it auto-updates).

---

## 📊 What Your Instructor Will See

### GitHub Repository:
- Clean code structure
- Complete README
- Training pipeline with MLflow
- Interactive Streamlit app
- Git version control

### Live Streamlit App:
- Professional dashboard
- Interactive visualizations
- Model comparisons
- MLflow integration
- Working predictions

---

## 🎓 Key Features to Highlight

Tell your instructor about:

1. **MLflow Integration**: 
   - Experiment tracking
   - Parameter logging
   - Metrics comparison

2. **Multiple Models**:
   - Random Forest
   - Gradient Boosting
   - Automatic best model selection

3. **Feature Engineering**:
   - Time-based features
   - Lag features
   - Rolling statistics

4. **Production Deployment**:
   - Cloud-hosted app
   - Interactive dashboard
   - Real-time predictions

5. **Best Practices**:
   - Version control with Git
   - Documentation (README)
   - Requirements management
   - Clean code structure

---

## ⏱️ Total Time Breakdown

- Setup & Installation: **5 min**
- Training Models: **2 min**
- Local Testing: **3 min**
- Git Setup: **2 min**
- GitHub Push: **3 min**
- Streamlit Deploy: **5 min**

**Total: 20 minutes** ✅

---

## 🎉 You're Done!

Your complete MLOps project is now:
- ✅ Trained with MLflow tracking
- ✅ Tested locally
- ✅ Pushed to GitHub
- ✅ Deployed on Streamlit Cloud
- ✅ Ready for submission!

**Good luck with your submission! 🚀**

---

## 📞 Need Help?

If something doesn't work:
1. Check the error message
2. Look at the "Common Issues" section above
3. Make sure all files are created correctly
4. Verify you're in the right directory

**Pro tip**: Screenshot your working app and GitHub repo as proof of completion!